<?xml version="1.0"?>
<launch>
  <!-- Roch Configure -->
  <arg name="base"		        default="$(env ROCH_BASE)"			    doc="mobile base type [roch]"/>
  <arg name="stacks"		    default="$(env ROCH_STACKS)"			doc="stack type displayed in visualisation/simulation [standard]"/>
  <arg name="3d_sensor"	    	default="$(env ROCH_3D_SENSOR)"			doc="3d sensor types [kinect, asus_xtion_pro, r200]"/>
  <arg name="3d_sensor_enable"	default="$(env ROCH_3D_SENSOR_ENABLE)"		doc="3d sensor enable"/>
  <arg name="2d_laser"		    default="$(env ROCH_LASER)"			    doc="2d laser types [ls01c, rplidar]"/>
  <arg name="2d_laser_enable"	default="$(env ROCH_LASER_ENABLE)"		doc="2d laser enable"/>
  <arg name="serialport"	    default="$(env ROCH_SERIAL_PORT)"		doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>
  <arg name="simulation"        default="$(env ROCH_SIMULATION)"  		doc="set flags to indicate this turtle is run in simulation mode."/>
  <arg name="robot_name"        default="$(env ROCH_NAME)"       		doc="used as a unique identifier and occasionally to preconfigure root namespaces, gateway/zeroconf ids etc."/>
  <arg name="robot_type"        default="$(env ROCH_TYPE)"       		doc="just in case you are considering a 'variant' and want to make use of this."/>
  <arg name="3d_sensor_nav_enable"		  default="$(env ROCH_3D_SENSOR_NAV_ENABLE)" doc="if this value set true, 2d_laser_enable must set false, otherwise will error."/> 

  <!-- Load Roch Model -->
  <include file="$(find roch_gazebo)/launch/includes/robot.launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
    <arg name="3d_sensor_enable" value="$(arg 3d_sensor_enable)"/>
    <arg name="2d_laser" value="$(arg 2d_laser)"/>
    <arg name="2d_laser_enable" value="$(arg 2d_laser_enable)"/>
  </include>

  <!-- Load Roch control information -->
  <include file="$(find roch_control)/launch/control.launch"/>

  <!--                        Using 3DSensor
   -->
  <group if="$(arg 3d_sensor_nav_enable)">
    <group unless="$(arg 2d_laser_enable)">
      <!-- Fake laser -->
      <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
      <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
            args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
        <param name="scan_height" value="10"/>
        <param name="output_frame_id" value="/camera_depth_frame"/>
        <param name="range_min" value="0.45"/>
        <remap from="image" to="/camera/depth/image_raw"/>
        <remap from="scan" to="/scan"/>
      </node>
    </group>
  </group>
   <!--                        2DLaser 
   -->
  <group if="$(arg 2d_laser_enable)">
    <group unless="$(arg 3d_sensor_nav_enable)">
	  <node pkg="laser_filters" type="scan_to_scan_filter_chain"
		  name="laser_filter">
		<rosparam command="load" file="$(find roch_bringup)/param/laser/$(arg 2d_laser)/laser.yaml" />
		<remap from="scan" to="scan" />
	  </node>
    </group>
  </group>

</launch>
